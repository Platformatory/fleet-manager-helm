apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: kafka-fm
  annotations:
    strimzi.io/node-pools: enabled
    strimzi.io/kraft: enabled
spec:
  kafka:
    image: platformatorylabs/strimzi-kafka-tiered-storage:{{ .Values.strimzi.version }}-kafka-{{ .Values.kafka.version }}
    template:
{{- if or (.Values.tolerations) (.Values.nodeAffinity) }}
      pod:
        tolerations:
{{ .Values.tolerations | default list | toYaml | indent 8 }}
{{- if .Values.nodeAffinity }}
        affinity:
          nodeAffinity:
{{ .Values.nodeAffinity | default dict | toYaml | indent 12 }}
{{- end }}
{{- end }}
{{- if eq .Values.kafka.tieredStorage.provider "S3" }}
      kafkaContainer:
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: strimzi-tiered-storage-creds
              key: AWS_ACCESS_KEY_ID
              optional: false
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: strimzi-tiered-storage-creds
              key: AWS_SECRET_ACCESS_KEY
              optional: false
{{- end }}
    version: {{ .Values.kafka.version }}
    listeners:
{{- if .Values.kafka.listeners.internal.enabled }}
      - name: plain
        port: 9092
        type: internal
        tls: false
        authentication:
          type: oauth
          validIssuerUri: {{ .Values.oauth.issuer }}
          jwksEndpointUri: {{ .Values.oauth.jwksEndpoint }}
          userNameClaim: {{ .Values.oauth.subClaim }}
          maxSecondsWithoutReauthentication: 3600
          enableMetrics: true
          checkAccessTokenType: false
          disableTlsHostnameVerification: true
{{- end }}
      - name: tls
        port: 9093
        type: internal
        tls: true
{{- if .Values.kafka.listeners.external.enabled }}
      - name: external
        port: 9094
        type: ingress
        tls: true
        authentication:
          type: oauth
          validIssuerUri: {{ .Values.oauth.issuer }}
          jwksEndpointUri: {{ .Values.oauth.jwksEndpoint }}
          userNameClaim: {{ .Values.oauth.subClaim }}
          maxSecondsWithoutReauthentication: 3600
          enableMetrics: true
          checkAccessTokenType: false
          disableTlsHostnameVerification: true
        configuration:
          brokerCertChainAndKey:
            secretName: tls-kafka-external
            certificate: tls.crt
            key: tls.key
          class: {{ .Release.Namespace }}
          hostTemplate: {{ .Release.Namespace }}-b{nodeId}.{{ .Values.domain }}
          bootstrap:
            host: {{ .Release.Namespace }}-bootstrap.{{ .Values.domain }}
{{- end }}
    authorization:
      type: simple
      superUsers:
        - {{ .Values.oauth.clientId }}
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
    logging:
      type: inline
      loggers:
        log4j.rootLogger: INFO, stdout, stderr
        log4j.appender.stdout: org.apache.log4j.ConsoleAppender
        log4j.appender.stdout.layout: org.apache.log4j.PatternLayout
        log4j.appender.stdout.layout.ConversionPattern: '[%d] %p %m (%c)%n'
        log4j.appender.stdout.Threshold: TRACE
        log4j.appender.stdout.Target: "System.out"
        log4j.appender.stdout.filter.filter1: "org.apache.log4j.varia.LevelRangeFilter"
        log4j.appender.stdout.filter.filter1.levelMin: TRACE
        log4j.appender.stdout.filter.filter1.levelMax: INFO
        log4j.appender.stderr: "org.apache.log4j.ConsoleAppender"
        log4j.appender.stderr.Threshold: WARN
        log4j.appender.stderr.Target: "System.err"
        log4j.appender.stderr.layout: "org.apache.log4j.PatternLayout"
        log4j.appender.stderr.layout.ConversionPattern: "[%d] %p %m (%c)%n"
    tieredStorage:
      type: custom
      remoteStorageManager:
        className: io.aiven.kafka.tieredstorage.storage.s3.S3Storage
        classPath: "/opt/kafka/libs/tiered-storage-s3/core/*:/opt/kafka/libs/tiered-storage-s3/s3/*"
        config:
          fetch.chunk.cache.retention.ms: "600000"
          fetch.chunk.cache.prefetch.max.size: "16777216"
          custom.metadata.fields.include: REMOTE_SIZE
          fetch.chunk.cache.class: io.aiven.kafka.tieredstorage.fetch.cache.DiskChunkCache
          chunk.size: "4194304"
          fetch.chunk.cache.path: /home/kafka/kafka-tiered-storage-cache
          key.prefix: {{ include "tieredStorage.keyPrefix" . }}
          fetch.chunk.cache.size: "1073741824"
          storage.backend.class: io.aiven.kafka.tieredstorage.storage.s3.S3Storage
          storage.s3.bucket.name: {{ include "tieredStorage.bucketName" . }}
          storage.s3.region: {{ .Values.kafka.tieredStorage.aws.region }}
          storage.aws.credentials.provider.class: "software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider"
{{- if .Values.kafka.tieredStorage.endpoint }}
          storage.s3.endpoint.url: {{ .Values.kafka.tieredStorage.endpoint }}
{{- end }}
{{- if eq .Values.kafka.tieredStorage.cloud "oci" }}
          storage.aws.certificate.check.enabled: "false"
          storage.s3.path.style.enabled: "true"
{{- end }}
    config:
      remote.log.storage.manager.class.path: "/opt/kafka/libs/tiered-storage-s3/core/*:/opt/kafka/libs/tiered-storage-s3/s3/*"
      rlmm.config.remote.log.metadata.topic.replication.factor: "1"
      remote.log.metadata.manager.class.name: org.apache.kafka.server.log.remote.metadata.storage.TopicBasedRemoteLogMetadataManager
      remote.log.storage.manager.class.name: io.aiven.kafka.tieredstorage.RemoteStorageManager
      remote.log.manager.task.interval.ms: "5000"
  entityOperator:
    topicOperator: {}
    userOperator: {}