apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraftcontroller
spec:
{{- if .Values.cfk.license }}
  license:
    secretRef: cfk-license
{{- end }}
{{- if eq .Values.tenancy "Isolated" }}
  podTemplate:
    tolerations:
    - key: "cluster_name"
      operator: "Equal"
      value: "{{ .Release.Namespace }}"
      effect: "NoSchedule"
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions: 
                - key: eks.amazonaws.com/nodegroup
                  operator: In
                  values: ["{{ .Release.Namespace }}"]
{{- end }}
  dataVolumeCapacity: {{ .Values.cfk.confluentPlatform.kraft.diskSize }}
  image:
    application: confluentinc/cp-server:{{ .Values.cfk.confluentPlatform.version }}
    init: confluentinc/confluent-init-container:{{ .Values.cfk.initContainer.version }}
  listeners:
    controller:
      authentication:
        type: mtls
        principalMappingRules:
          - "RULE:.*CN=([a-zA-Z0-9.-]*).*$/$1/"
          - "DEFAULT"
      tls:
        enabled: true
  tls:
    autoGeneratedCerts: true
  replicas: {{ .Values.replicas }}
  metrics:
    prometheus:
      rules:
        - pattern: kafka.server<type=raft-metrics><>(.+):(.*)
          name: kafka_server_raft_metrics_$1
          type: GAUGE
          cache: true
        - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
          name: kafka_$1_$2_$3