apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraftcontroller
spec:
  oneReplicaPerNode: true
{{- if .Values.cfk.license }}
  license:
    secretRef: cfk-license
{{- end }}
  podTemplate:
{{- if .Values.tolerations }}
    tolerations:
{{ .Values.tolerations | default list | toYaml | indent 4 }}
{{- end }}
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
{{- if and (ne .Values.tenancy "Shared") (not .Values.stacked) }}
        - labelSelector:
            matchExpressions:
            - key: confluent-platform
              operator: In
              values:
              - "true"
          topologyKey: kubernetes.io/hostname
{{- end }}
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - kraftcontroller
{{- if ne .Values.tenancy "Shared" }}
              - controlcenter
              - schemaregistry
{{- end }}
          topologyKey: kubernetes.io/hostname
{{- if ne .Values.tenancy "Shared" }}
        - labelSelector:
            matchExpressions:
            - key: alertmanager
              operator: Exists
          topologyKey: kubernetes.io/hostname
        - labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/instance
              operator: In
              values:
              - "{{ .Release.Namespace }}-ingress-nginx"
          topologyKey: kubernetes.io/hostname
{{- end }}
{{- if .Values.nodeAffinity }}
      nodeAffinity:
{{ .Values.nodeAffinity | default dict | toYaml | indent 8 }}
{{- end }}
  dataVolumeCapacity: {{ .Values.cfk.confluentPlatform.kraft.diskSize }}
  configOverrides:
    log4j:
      - log4j.rootLogger=INFO, stdout, stderr
      - log4j.appender.stdout.Threshold = TRACE
      - log4j.appender.stdout.Target   = System.out
      - log4j.appender.stdout.filter.filter1=org.apache.log4j.varia.LevelRangeFilter
      - log4j.appender.stdout.filter.filter1.levelMin=TRACE
      - log4j.appender.stdout.filter.filter1.levelMax=INFO
      - log4j.appender.stderr = org.apache.log4j.ConsoleAppender
      - log4j.appender.stderr.Threshold = WARN
      - log4j.appender.stderr.Target   = System.err
      - log4j.appender.stderr.layout=org.apache.log4j.PatternLayout
      - log4j.appender.stderr.layout.ConversionPattern=[%d] %p %m (%c)%n
    server:
      - confluent.balancer.enable=true
      - confluent.balancer.heal.uneven.load.trigger=ANY_UNEVEN_LOAD
  image:
    application: confluentinc/cp-server:{{ .Values.cfk.confluentPlatform.version }}
    init: confluentinc/confluent-init-container:{{ .Values.cfk.initContainer.version }}
  listeners:
    controller:
      authentication:
        type: mtls
        principalMappingRules:
          - "RULE:.*CN=([a-zA-Z0-9.-]*).*$/$1/"
          - "DEFAULT"
      tls:
        enabled: true
  tls:
    autoGeneratedCerts: true
  replicas: 3
  metrics:
    prometheus:
      rules:
        - pattern: kafka.server<type=raft-metrics><>(.+):(.*)
          name: kafka_server_raft_metrics_$1
          type: GAUGE
          cache: true
        - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
          name: kafka_$1_$2_$3