apiVersion: platform.confluent.io/v1beta1
kind: ControlCenter
metadata:
  name: controlcenter
spec:
{{- if .Values.cfk.license }}
  license:
    secretRef: cfk-license
{{- end }}
{{- if eq .Values.tenancy "Isolated" }}
  podTemplate:
    tolerations:
    - key: "cluster_name"
      operator: "Equal"
      value: "{{ .Release.Namespace }}"
      effect: "NoSchedule"
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions: 
                - key: eks.amazonaws.com/nodegroup
                  operator: In
                  values: ["{{ .Release.Namespace }}"]
{{- end }}
  authorization:
    type: rbac
  replicas: 1
  image:
    application: confluentinc/cp-enterprise-control-center:{{ .Values.cfk.confluentPlatform.version }}
    init: confluentinc/confluent-init-container:{{ .Values.cfk.initContainer.version }}
  dataVolumeCapacity: {{ .Values.cfk.confluentPlatform.controlCenter.diskSize }}
  tls:
    autoGeneratedCerts: true
  configOverrides:
    server:
{{ $replicas := (.Values.replicas | int) }}
{{- if lt $replicas 3 }}
      - confluent.controlcenter.command.topic.replication={{ .Values.replicas }}
      - confluent.controlcenter.replication.factor={{ .Values.replicas }}
      - confluent.metrics.reporter.topic.replicas={{ .Values.replicas }}
      - confluent.metrics.topic.replication={{ .Values.replicas }}
      - confluent.monitoring.interceptor.topic.replication={{ .Values.replicas }}
      - confluent.controlcenter.internal.topics.replication={{ .Values.replicas }}
{{- end }}
      - confluent.controlcenter.rest.listeners=http://0.0.0.0:9021
      - --confluent.controlcenter.rest.ssl.key.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - --confluent.controlcenter.rest.ssl.keystore.location=/mnt/sslcerts/keystore.p12
      - --confluent.controlcenter.rest.ssl.keystore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - --confluent.controlcenter.rest.ssl.truststore.location=/mnt/sslcerts/truststore.p12
      - --confluent.controlcenter.rest.ssl.truststore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.{{ .Release.Namespace }}.svc.cluster.local:9071
      authentication:
        type: mtls
      tls:
        enabled: true
    schemaRegistry:
      url: http://schemaregistry.{{ .Release.Namespace }}.svc.cluster.local:8081
      authentication:
        type: oauth
        oauth:
          secretRef: oauth-jaas
          configuration:
            tokenEndpointUri: {{ .Values.oauth.tokenEndpoint }}
            expectedIssuer: {{ .Values.oauth.issuer }}
            jwksEndpointUri: {{ .Values.oauth.jwksEndpoint }}
            subClaimName: {{ .Values.oauth.subClaim }}
            scope: {{ .Values.oauth.scope }}
        sslClientAuthentication: false
      tls:
        enabled: false
    mds:
      tls:
        enabled: false
        ignoreTrustStoreConfig: true
      ssoProtocol: oidc
      endpoint: http://kafka.{{ .Release.Namespace }}.svc.cluster.local:9099
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: oauth
        oauth:
          secretRef: oauth-jaas
          configuration:
            tokenEndpointUri: {{ .Values.oauth.tokenEndpoint }}
            expectedIssuer: {{ .Values.oauth.issuer }}
            jwksEndpointUri: {{ .Values.oauth.jwksEndpoint }}
            subClaimName: {{ .Values.oauth.subClaim }}
            scope: {{ .Values.oauth.scope }}