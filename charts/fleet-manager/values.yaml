fleetmanager:
  domain: 
  license: 
  ui:
    image: ghcr.io/platformatory/fleet-manager-ui:v0.0.1-main-cb160c9
  api:
    image: ghcr.io/platformatory/fleet-manager-api:v0.0.1-main-cb160c9
  orchestrator:
    image: ghcr.io/platformatory/fleet-manager-orchestrator:v0.0.1-main-cb160c9
  mcp:
    image: ghcr.io/platformatory/fleet-manager-mcp:v0.0.1-main-cb160c9
  kubeconfig:
    provider: static # Can be aws. If aws, the aws credentials section must be set accordingly.
    credentials: {}
    # credentials:
    #   aws_access_key: ''
    #   aws_secret_key: ''
    #   aws_region: ''
    #   cluster_name: ''
  rootOrg: root
  oidc:
    issuer:
    jwksUri:
    audience:
    scope:
    tokenEndpoint:
    emailClaim: email
    groupsClaim: groups
    authorizeEndpoint:
    refreshToken: false
    clientId:
    clientSecret:
    rsaPublicKey:
  superUserEmails:
  secrets:
    provider: builtin # can be vault
    vault:
      url:
      namespace:
      mount_path:
      role_id:
      secret_id:
  gateway_image: 
    repository: ghcr.io/platformatory/fleet-manager-customer-gateway
    tag: v0.0.2
  cookie_encryption_key: "your-32-byte-encryption-key-here-123456789012"
keycloak:
  bootstrap: false
grafana:
  oidc:
    scope: 
    tokenEndpoint: 
    emailClaim: 
    authorizeEndpoint: 
    userInfoEndppint: 
    logoutRedirectUrl: 
    clientId: 
    clientSecret:
certManager:
  solvers:
  - http01:
      ingress:
        podTemplate:
            metadata:
              annotations:
                kuma.io/sidecar-injection: 'false'   # If ingress is running in Kuma/Kong Mesh, disable sidecar injection
                sidecar.istio.io/inject: 'false'  # If using Istio, disable sidecar injection
        class: kong